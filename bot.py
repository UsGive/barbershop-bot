import os
import asyncpg
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    [KeyboardButton("üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É")],
    [KeyboardButton("üßî –ù–∞—à–∏ –±–∞—Ä–±–µ—Ä—ã")],
    [KeyboardButton("üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã")],
    [KeyboardButton("üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")]
]
# –í–∞—Ä–∏–∞–Ω—Ç—ã –±–∞—Ä–±–µ—Ä–æ–≤ –∏ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–∏
BARBERS = {
    "–ò—Ä–∞": {
        "photo": "media/ira.jpg",
        "video": "media/ira.mp4",
        "description": "‚úÇÔ∏è –ò—Ä–∞ ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –º—É–∂—Å–∫–∏–º –∏ –∂–µ–Ω—Å–∫–∏–º —Å—Ç—Ä–∏–∂–∫–∞–º. 5 –ª–µ—Ç –æ–ø—ã—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –∫ –¥–µ—Ç–∞–ª—è–º –∏ –≤–µ–∂–ª–∏–≤–∞—è."
    },
    "–ê–º–∞–Ω": {
        "photo": "media/aman.jpg",
        "video": "media/aman.mp4",
        "description": "üíà –ê–º–∞–Ω ‚Äî –º–∞—Å—Ç–µ—Ä —Ñ–µ–π–¥–æ–≤ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–ª–∞–¥–æ–∫. 4 –≥–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å—Ç–∏–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π."
    },
    "–û–ª–µ–≥": {
        "photo": "media/oleg.jpg",
        "video": "media/oleg.mp4",
        "description": "üßî –û–ª–µ–≥ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –±–æ—Ä–æ–¥–æ–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–º —Å—Ç—Ä–∏–∂–∫–∞–º. –ë–æ–ª–µ–µ 6 –ª–µ—Ç –æ–ø—ã—Ç–∞. –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
    }
}
# –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
TIME_OPTIONS = ["10:00", "11:00", "12:00", "13:00", "14:00"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [817664298]  # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram user_id

# –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_pool = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö 14 –¥–Ω–µ–π
def get_upcoming_dates(n_days=14):
    today = datetime.now()
    return [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(n_days)]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

    async with db_pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS appointments (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            barber TEXT,
            name TEXT,
            date TEXT,
            time TEXT,
            phone TEXT,
            created_at TIMESTAMP DEFAULT NOW()
        );
        """)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–∞—Ä–±–µ—Ä–∞ –Ω–∞ –¥–∞—Ç—É
async def get_available_times(barber, date):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT time FROM appointments
            WHERE barber = $1 AND date = $2
        """, barber, date)
    booked_times = {row['time'] for row in rows}
    available_times = [time for time in TIME_OPTIONS if time not in booked_times]
    return available_times

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"booking": None, "step": None}
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BarberBot üíà",
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É":
        user_state[user_id] = {"step": "choose_barber"}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([[b] for b in BARBERS.keys()], resize_keyboard=True)
        )

    elif text in BARBERS and user_state.get(user_id, {}).get("step") == "choose_barber":
        user_state[user_id]["barber"] = text
        user_state[user_id]["step"] = "type_name"
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )

    elif user_state.get(user_id, {}).get("step") == "type_name":
        user_state[user_id]["name"] = text
        user_state[user_id]["step"] = "type_date"
        dates = get_upcoming_dates()
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=ReplyKeyboardMarkup([[d] for d in dates], resize_keyboard=True)
        )


    elif user_state.get(user_id, {}).get("step") == "type_date":

        user_state[user_id]["date"] = text

        user_state[user_id]["step"] = "choose_time"

        available_times = await get_available_times(user_state[user_id]["barber"], text)

        if not available_times:

            await update.message.reply_text(
                "‚ùó –ù–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")

            dates = get_upcoming_dates()

            await update.message.reply_text(

                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",

                reply_markup=ReplyKeyboardMarkup([[d] for d in dates], resize_keyboard=True)

            )

        else:

            await update.message.reply_text(

                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",

                reply_markup=ReplyKeyboardMarkup([[t] for t in available_times], resize_keyboard=True)

            )


    elif user_state.get(user_id, {}).get("step") == "choose_time":

        available_times = await get_available_times(user_state[user_id]["barber"], user_state[user_id]["date"])

        if text in available_times:

            user_state[user_id]["time"] = text

            user_state[user_id]["step"] = "type_phone"

            await update.message.reply_text(

                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 555 888888):",

                reply_markup=ReplyKeyboardRemove()

            )

        else:

            if available_times:

                await update.message.reply_text(

                    "‚ùó –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ:",

                    reply_markup=ReplyKeyboardMarkup([[t] for t in available_times], resize_keyboard=True)

                )

            else:

                await update.message.reply_text(

                    "‚ùó –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."

                )

                dates = get_upcoming_dates()

                await update.message.reply_text(

                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",

                    reply_markup=ReplyKeyboardMarkup([[d] for d in dates], resize_keyboard=True)

                )

    elif user_state.get(user_id, {}).get("step") == "type_phone":
        phone_parts = text.split()
        if len(phone_parts) == 2 and all(part.isdigit() for part in phone_parts) and len(phone_parts[0]) == 3 and len(phone_parts[1]) == 6:
            user_state[user_id]["phone"] = text
            d = user_state[user_id]
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ë–∞—Ä–±–µ—Ä: {d['barber']}\n–ò–º—è: {d['name']}\n–î–∞—Ç–∞: {d['date']}\n–í—Ä–µ–º—è: {d['time']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {d['phone']}\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! üíà",
                reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            async with db_pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO appointments (user_id, barber, name, date, time, phone)
                    VALUES ($1, $2, $3, $4, $5, $6)
                """, user_id, d['barber'], d['name'], d['date'], d['time'], d['phone'])
            user_state[user_id] = {"step": None}
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (555 888888):"
            )

    elif text == "üßî –ù–∞—à–∏ –±–∞—Ä–±–µ—Ä—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([[name] for name in BARBERS.keys()] + [["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text in BARBERS:
        barber = BARBERS[text]
        try:
            with open(barber["photo"], "rb") as photo_file:
                await update.message.reply_photo(photo=photo_file, caption=barber["description"])
            with open(barber["video"], "rb") as video_file:
                await update.message.reply_video(video=video_file)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        await update.message.reply_text(
            "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )

    elif text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )

    elif text == "üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã":
        await update.message.reply_text(
            "üíá –°—Ç—Ä–∏–∂–∫–∞ ‚Äì 700\nüßî –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã ‚Äì 500\nüíÜ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å ‚Äì 1100"
        )

    elif text == "üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìç —É–ª. –ë–∞—Ä–±–µ—Ä—Å–∫–∞—è, 123\nüìû +996 (555) 23-45-67\nüïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 10:00 ‚Äì 20:00"
        )

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    today = datetime.now().date()

    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT barber, name, date, time, phone
            FROM appointments
            WHERE to_date(date, 'DD.MM.YYYY') BETWEEN $1 AND $2
            ORDER BY to_date(date, 'DD.MM.YYYY'), time
        """, today, today + timedelta(days=14))

    if not rows:
        await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π –Ω–µ—Ç.")
    else:
        message = "üìã –ó–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π:\n\n"
        for row in rows:
            message += (
                f"üë§ –ò–º—è: {row['name']}\n"
                f"üíà –ë–∞—Ä–±–µ—Ä: {row['barber']}\n"
                f"üìÖ –î–∞—Ç–∞: {row['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {row['time']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {row['phone']}\n\n"
            )
        await update.message.reply_text(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(app):
    await init_db()

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_menu))
    app.run_polling()

if __name__ == "__main__":
    main()
