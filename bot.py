import os
import asyncio
import asyncpg
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime, timedelta
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î –ú–ú–ú–ú", –Ω–∞–ø—Ä–∏–º–µ—Ä "16 –∞–ø—Ä–µ–ª—è")
DATE_OPTIONS = [
    (datetime.now() + timedelta(days=i)).strftime("%d %B")
    for i in range(14)
]
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    [KeyboardButton("üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É")],
    [KeyboardButton("üßî –ù–∞—à–∏ –±–∞—Ä–±–µ—Ä—ã")],
    [KeyboardButton("üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã")],
    [KeyboardButton("üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")]
]
# –í–∞—Ä–∏–∞–Ω—Ç—ã –±–∞—Ä–±–µ—Ä–æ–≤ –∏ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–∏
BARBERS = {
    "–ò—Ä–∞": {
        "photo": "media/ira.jpg",
        "video": "media/ira.mp4",
        "description": "‚úÇÔ∏è –ò—Ä–∞ ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –º—É–∂—Å–∫–∏–º –∏ –∂–µ–Ω—Å–∫–∏–º —Å—Ç—Ä–∏–∂–∫–∞–º. 5 –ª–µ—Ç –æ–ø—ã—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –∫ –¥–µ—Ç–∞–ª—è–º –∏ –≤–µ–∂–ª–∏–≤–∞—è."
    },
    "–ê–º–∞–Ω": {
        "photo": "media/aman.jpg",
        "video": "media/aman.mp4",
        "description": "üíà –ê–º–∞–Ω ‚Äî –º–∞—Å—Ç–µ—Ä —Ñ–µ–π–¥–æ–≤ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–ª–∞–¥–æ–∫. 4 –≥–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å—Ç–∏–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π."
    },
    "–û–ª–µ–≥": {
        "photo": "media/oleg.jpg",
        "video": "media/oleg.mp4",
        "description": "üßî –û–ª–µ–≥ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –±–æ—Ä–æ–¥–æ–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–º —Å—Ç—Ä–∏–∂–∫–∞–º. –ë–æ–ª–µ–µ 6 –ª–µ—Ç –æ–ø—ã—Ç–∞. –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
    }
}
# –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
TIME_OPTIONS = ["10:00", "11:00", "12:00", "13:00", "14:00"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            barber TEXT,
            name TEXT,
            date TEXT,
            time TEXT,
            phone TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    await conn.close()
async def save_booking(user_id, barber, name, date, time, phone):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        INSERT INTO bookings (user_id, barber, name, date, time, phone)
        VALUES ($1, $2, $3, $4, $5, $6)
    ''', user_id, barber, name, date, time, phone)
    await conn.close()
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("START TRIGGERED")  # –¥–ª—è –ª–æ–≥–æ–≤ Railway

    if update.message:
        user_id = update.effective_user.id
        user_state[user_id] = {"booking": None, "step": None}

        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BarberBot üíà",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É":
        user_state[user_id] = {"step": "choose_barber"}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([[b] for b in BARBERS.keys()], resize_keyboard=True)
        )

    elif text in BARBERS and user_state.get(user_id, {}).get("step") == "choose_barber":
        user_state[user_id]["barber"] = text
        user_state[user_id]["step"] = "type_name"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

    elif user_state.get(user_id, {}).get("step") == "type_name":

        user_state[user_id]["name"] = text

        user_state[user_id]["step"] = "choose_date"

        await update.message.reply_text(

            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",

            reply_markup=ReplyKeyboardMarkup(

                [DATE_OPTIONS[i:i + 2] for i in range(0, len(DATE_OPTIONS), 2)],

                resize_keyboard=True

            )

        )

    elif user_state.get(user_id, {}).get("step") == "choose_date":

        if text in DATE_OPTIONS:

            user_state[user_id]["date"] = text

            user_state[user_id]["step"] = "choose_time"

            await update.message.reply_text(

                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",

                reply_markup=ReplyKeyboardMarkup(

                    [TIME_OPTIONS[i:i + 2] for i in range(0, len(TIME_OPTIONS), 2)],

                    resize_keyboard=True

                )

            )

        else:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    elif text in TIME_OPTIONS and user_state.get(user_id, {}).get("step") == "choose_time":
        user_state[user_id]["time"] = text
        user_state[user_id]["step"] = "type_phone"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 555 78 22 33):")


    elif user_state.get(user_id, {}).get("step") == "type_phone":

        if len(text.split()) == 4 and all(part.isdigit() for part in text.split()):

            user_state[user_id]["phone"] = text

            d = user_state[user_id]

            confirmation_text = (

                f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"

                f"–ë–∞—Ä–±–µ—Ä: {d['barber']}\n"

                f"–ò–º—è: {d['name']}\n"

                f"–î–∞—Ç–∞: {d['date']}\n"

                f"–í—Ä–µ–º—è: {d['time']}\n"

                f"–¢–µ–ª–µ—Ñ–æ–Ω: {d['phone']}\n\n"

                f"–î–æ –≤—Å—Ç—Ä–µ—á–∏! üíà"

            )

            await update.message.reply_text(confirmation_text,
                                            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
            await save_booking(
                user_id=user_id,
                barber=d['barber'],
                name=d['name'],
                date=d['date'],
                time=d['time'],
                phone=d['phone']
            )

    elif text == "üßî –ù–∞—à–∏ –±–∞—Ä–±–µ—Ä—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([[name] for name in BARBERS.keys()] + [["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text in BARBERS:
        barber = BARBERS[text]
        try:
            with open(barber["photo"], "rb") as photo_file:
                await update.message.reply_photo(photo=photo_file, caption=barber["description"])
            with open(barber["video"], "rb") as video_file:
                await update.message.reply_video(video=video_file)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        await update.message.reply_text("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))

    elif text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))

    elif text == "üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã":
        await update.message.reply_text(
            "üíá –°—Ç—Ä–∏–∂–∫–∞ ‚Äì 700\nüßî –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã ‚Äì 500\nüíÜ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å ‚Äì 1100"
        )

    elif text == "üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìç —É–ª. –ë–∞—Ä–±–µ—Ä—Å–∫–∞—è, 123\nüìû +996 (555) 23-45-67\nüïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 10:00 ‚Äì 20:00"
        )

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    loop = asyncio.get_event_loop()

    # –ó–∞–ø—É—Å–∫–∞–µ–º init_db –≤ loop
    loop.run_until_complete(init_db())
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_menu))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç (–≤–Ω—É—Ç—Ä–∏ –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
    app.run_polling()
