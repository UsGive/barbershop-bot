# –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ë–æ—Ç BarberBot –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞—Ö

import os
import asyncpg
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ë–∞—Ä–±–µ—Ä—ã
BARBERS = {
    "–ò—Ä–∞": "media/ira.jpg",
    "–ê–º–∞–Ω": "media/aman.jpg",
    "–û–ª–µ–≥": "media/oleg.jpg"
}

# –í—Ä–µ–º—è
TIME_OPTIONS = ["10:00", "11:00", "12:00", "13:00", "14:00"]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –ü—É–ª –±–∞–∑—ã
db_pool = None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç
def get_upcoming_dates(n_days=14):
    today = datetime.now()
    return [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(n_days)]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS appointments (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                barber TEXT,
                name TEXT,
                date TEXT,
                time TEXT,
                phone TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"step": None}

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BarberBot üíà\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup([
            ["üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É"],
            ["üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", "üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
        ], resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É":
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"barber:{name}")] for name in BARBERS.keys()
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif text == "üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã":
        await update.message.reply_text(
            "üíá –°—Ç—Ä–∏–∂–∫–∞ ‚Äì 700\nüßî –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã ‚Äì 500\nüíÜ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å ‚Äì 1100"
        )

    elif text == "üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìç —É–ª. –ë–∞—Ä–±–µ—Ä—Å–∫–∞—è, 123\nüìû +996 (555) 23-45-67\nüïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 10:00 ‚Äì 20:00"
        )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async def get_available_times(barber, date):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT time FROM appointments WHERE barber = $1 AND date = $2
        """, barber, date)
    booked = {row['time'] for row in rows}
    return [time for time in TIME_OPTIONS if time not in booked]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("barber:"):
        barber = data.split(":")[1]
        user_state[user_id] = {"barber": barber, "step": "choose_date"}

        dates = get_upcoming_dates()
        keyboard = [[InlineKeyboardButton(date, callback_data=f"date:{date}")] for date in dates]

        await query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∞—Ä–±–µ—Ä–∞: {barber}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("date:"):
        date = data.split(":")[1]
        user_state[user_id]["date"] = date
        user_state[user_id]["step"] = "choose_time"

        available_times = await get_available_times(user_state[user_id]["barber"], date)
        if not available_times:
            await query.message.edit_text("‚ùó –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            return

        keyboard = [[InlineKeyboardButton(time, callback_data=f"time:{time}")] for time in available_times]
        await query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("time:"):
        time = data.split(":")[1]
        user_state[user_id]["time"] = time
        user_state[user_id]["step"] = "type_phone"

        await query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {time}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç 555 888888):"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if user_id not in user_state:
        return

    step = user_state[user_id].get("step")
    if step == "type_phone":
        if text.replace(" ", "").isdigit() and len(text.replace(" ", "")) == 9:
            user_state[user_id]["phone"] = text
            d = user_state[user_id]

            async with db_pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO appointments (user_id, barber, name, date, time, phone)
                    VALUES ($1, $2, $3, $4, $5, $6)
                """, user_id, d["barber"], update.effective_user.first_name, d["date"], d["time"], d["phone"])

            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ë–∞—Ä–±–µ—Ä: {d['barber']}\n–î–∞—Ç–∞: {d['date']}\n–í—Ä–µ–º—è: {d['time']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {d['phone']}\n\n–°–ø–∞—Å–∏–±–æ! üíà",
                reply_markup=ReplyKeyboardMarkup([
                    ["üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É"],
                    ["üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", "üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
                ], resize_keyboard=True)
            )
            user_state.pop(user_id)
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 555 888888.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def on_startup(app):
    await init_db()

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_menu))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
